// AllO_G –ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
class AllO_G_Communicator {
    constructor() {
        this.participants = new Map();
        this.selectedParticipant = null;
        this.init();
    }

    init() {
        console.log('üöÄ AllO_G –ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω');
        this.loadParticipants();
        this.updateProtocolStatus();
        this.setupEventListeners();
    }

    loadParticipants() {
        testParticipants.forEach(participant => {
            this.participants.set(participant.id, participant);
        });
        this.renderParticipants();
    }

    renderParticipants() {
        const container = document.getElementById('participantsList');
        container.innerHTML = '';

        this.participants.forEach(participant => {
            const card = this.createParticipantCard(participant);
            container.appendChild(card);
        });
    }

    createParticipantCard(participant) {
        const card = document.createElement('div');
        card.className = 'participant-card';
        card.dataset.participantId = participant.id;

        const statusClass = participant.status.online ? 'online' : 'offline';
        const batteryIcon = this.getBatteryIcon(participant.status.battery);
        const lastSeenText = this.formatLastSeen(participant.status.lastSeen);

        card.innerHTML = `
            <div class="participant-avatar">${participant.avatar}</div>
            <div class="participant-info">
                <div class="participant-name">${participant.callsign}</div>
                <div class="participant-details">
                    <span>${batteryIcon}${participant.status.battery}%</span>
                    <span>‚Ä¢</span>
                    <span>${lastSeenText}</span>
                </div>
            </div>
            <div class="participant-actions">
                <div class="quick-action call" onclick="makeCall('${participant.id}')" title="–ü–æ–∑–≤–æ–Ω–∏—Ç—å">
                    üìû
                </div>
                <div class="quick-action message" onclick="sendMessage('${participant.id}')" title="–°–æ–æ–±—â–µ–Ω–∏–µ">
                    üí¨
                </div>
                <div class="quick-action" onclick="showLocation('${participant.id}')" title="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ">
                    üìç
                </div>
                <div class="status-indicator ${statusClass}"></div>
            </div>
            <div class="participant-menu" onclick="showParticipantMenu(event, '${participant.id}')">
                <div class="menu-dots">
                    <div class="menu-dot"></div>
                    <div class="menu-dot"></div>
                    <div class="menu-dot"></div>
                </div>
            </div>
        `;

        return card;
    }

    updateProtocolStatus() {
        Object.keys(protocolStatus).forEach(protocol => {
            const element = document.getElementById(`protocol-${protocol}`);
            const status = protocolStatus[protocol];
            
            element.className = 'protocol';
            if (status.active) {
                if (status.quality === 'good') {
                    element.classList.add('active');
                } else {
                    element.classList.add('poor');
                }
            } else {
                element.classList.add('offline');
            }
            
            element.title = this.getProtocolTooltip(protocol, status);
        });
    }

    getProtocolTooltip(protocol, status) {
        const names = {
            I: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç',
            W: 'WiFi –ª–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å', 
            A: '–¢–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞',
            Z: 'ZigBee —Å–µ—Ç—å'
        };

        if (!status.active) {
            return `${names[protocol]}: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω`;
        }

        switch(protocol) {
            case 'I':
                return `${names[protocol]}: ${status.type}, ${status.quality}`;
            case 'W':
                return `${names[protocol]}: ${status.devices} —É—Å—Ç—Ä–æ–π—Å—Ç–≤`;
            case 'A':
                return `${names[protocol]}: ${status.clients} –∫–ª–∏–µ–Ω—Ç–æ–≤`;
            case 'Z':
                return `${names[protocol]}: ${status.mesh ? 'Mesh –∞–∫—Ç–∏–≤–Ω–∞' : '–ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ'}`;
            default:
                return names[protocol];
        }
    }

    getBatteryIcon(battery) {
        if (battery > 75) return 'üîã';
        if (battery > 50) return 'üîã';
        if (battery > 25) return 'ü™´';
        return 'ü™´';
    }

    formatLastSeen(lastSeen) {
        const now = new Date();
        const seen = new Date(lastSeen);
        const diffMs = now - seen;
        const diffMins = Math.floor(diffMs / 60000);

        if (diffMins < 1) return '—Å–µ–π—á–∞—Å';
        if (diffMins < 60) return `${diffMins}–º –Ω–∞–∑–∞–¥`;
        
        const diffHours = Math.floor(diffMins / 60);
        if (diffHours < 24) return `${diffHours}—á –Ω–∞–∑–∞–¥`;
        
        const diffDays = Math.floor(diffHours / 24);
        return `${diffDays}–¥ –Ω–∞–∑–∞–¥`;
    }

    setupEventListeners() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.context-menu')) {
                this.hideContextMenu();
            }
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            this.updateProtocolStatus();
            this.renderParticipants();
        }, 30000);
    }

    hideContextMenu() {
        const menu = document.getElementById('participantMenu');
        menu.classList.remove('show');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è UI
function showInfo() {
    const popup = document.getElementById('infoPopup');
    popup.classList.add('show');
}

function hideInfo() {
    const popup = document.getElementById('infoPopup');
    popup.classList.remove('show');
}

function showParticipantMenu(event, participantId) {
    event.stopPropagation();
    
    const menu = document.getElementById('participantMenu');
    const rect = event.target.getBoundingClientRect();
    
    menu.style.left = `${rect.left - 150}px`;
    menu.style.top = `${rect.bottom + 5}px`;
    menu.classList.add('show');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    menu.dataset.participantId = participantId;
}

function makeCall(participantId) {
    const participant = app.participants.get(participantId);
    if (participant) {
        console.log(`üìû –ó–≤–æ–Ω–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫—É: ${participant.callsign}`);
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏ –∑–≤–æ–Ω–∫–∞
        window.location.href = `tel:${participant.phone}`;
    }
}

function sendMessage(participantId) {
    const participant = app.participants.get(participantId);
    if (participant) {
        console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É: ${participant.callsign}`);
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        window.location.href = `sms:${participant.phone}`;
    }
}

function showLocation(participantId) {
    const participant = app.participants.get(participantId);
    if (participant) {
        console.log(`üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${participant.callsign}`);
        alert(`–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ ${participant.callsign}: ${participant.status.location}`);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏
function openDialer() {
    console.log('üìû –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä–æ–Ω–∞–±–∏—Ä–∞—Ç–µ–ª—å');
    alert('–ù–æ–º–µ—Ä–æ–Ω–∞–±–∏—Ä–∞—Ç–µ–ª—å (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

function openSearch() {
    console.log('üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫');
    alert('–ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

function startGroupCall() {
    console.log('üìûüë• –ì—Ä—É–ø–ø–æ–≤–æ–π –≤—ã–∑–æ–≤');
    alert('–ì—Ä—É–ø–ø–æ–≤–æ–π –≤—ã–∑–æ–≤ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

function sendBroadcast() {
    console.log('üì¢ –†–∞—Å—Å—ã–ª–∫–∞');
    alert('–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

function openAnalytics() {
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    alert('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

function openSettings() {
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏');
    alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

// –§—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
function editParticipant() {
    const menu = document.getElementById('participantMenu');
    const participantId = menu.dataset.participantId;
    console.log(`‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${participantId}`);
    alert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
    app.hideContextMenu();
}

function configureParticipant() {
    const menu = document.getElementById('participantMenu');
    const participantId = menu.dataset.participantId;
    console.log(`‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${participantId}`);
    alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
    app.hideContextMenu();
}

function viewHistory() {
    const menu = document.getElementById('participantMenu');
    const participantId = menu.dataset.participantId;
    console.log(`üìã –ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${participantId}`);
    alert('–ò—Å—Ç–æ—Ä–∏—è —Å–≤—è–∑–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
    app.hideContextMenu();
}

function removeParticipant() {
    const menu = document.getElementById('participantMenu');
    const participantId = menu.dataset.participantId;
    
    if (confirm('–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞?')) {
        app.participants.delete(participantId);
        app.renderParticipants();
        console.log(`üóëÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω: ${participantId}`);
    }
    
    app.hideContextMenu();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;
document.addEventListener('DOMContentLoaded', () => {
    app = new AllO_G_Communicator();
});
